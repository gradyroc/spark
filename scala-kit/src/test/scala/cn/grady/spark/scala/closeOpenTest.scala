package cn.grady.spark.scala

import cn.grady.spark.scala.HighFuncTest.getGreetingFunc

/**
 * @author rociss 
 * @version 1.0, on 1:33 2022/7/4.
 */
object closeOpenTest {

  /**
   * 闭包：函数的变量不处于其有效作用域时，还能够对变量进行访问，即为闭包
   * @param args
   */

  def main(args: Array[String]): Unit = {
    val greetingFuncHello = getGreetingFunc("hello")
    val  greetingFuncHi = getGreetingFunc("hi")

//    闭包
    greetingFuncHello("leo")
    greetingFuncHi("leo")
    /**
     * 两次调用 getGreetingFunc,传入不同的msg，并创建不同的函数返回
     * 然而：msg只是一个局部变量，却在getGreetingFunc 执行完之后，还可以继续存在被创建的函数之中；
     * greetingFuncHello("leo") ，调用时，值为“hello"的msg 被保留在了函数内部，可以反复使用
     * 这种变量超出了其作用域，还可以继续使用的情况，即为闭包
     *
     * scala 通过给每个函数创建对象来实现闭包，实际上对于 getGreetingFunc 创建的函数，msg是作为函数对象的变量存在的
     * 因此每个函数才能拥有不同的msg
     */
  }

}
